from Crypto.Util.number import inverse

n = 362433315617467211669633373003829486226172411166482563442958886158019905839570405964630640284863309204026062750823707471292828663974783556794504696138513859209
c = 104442881094680864129296583260490252400922571545171796349604339308085282733910615781378379107333719109188819881987696111496081779901973854697078360545565962079
q = 2
e = 65537

while True:
    if(n%q==0):
        # print(q)
        break
    q+=1

p = n // q
f = (p-1)*(q-1)
d = inverse(e,f)
m = pow(c,d,n)
# print(m)

length = (m.bit_length() + 7) // 8
flag = m.to_bytes(length, 'big').decode()
print(flag)
